from time import perf_counter
from matplotlib import pyplot as plt

def shortest_common_supersequence_dp(s1, s2):
    # Inicializar la matriz de memoización
    memo = [[0] * (len(s2) + 1) for _ in range(len(s1) + 1)]
    
    # Calcular la longitud de la subsecuencia común más larga para todas las subcadenas de s1 y s2
    for i in range(len(s1) + 1):
        for j in range(len(s2) + 1):
            if i == 0 or j == 0:
                memo[i][j] = 0
            elif s1[i-1] == s2[j-1]:
                memo[i][j] = memo[i-1][j-1] + 1
            else:
                memo[i][j] = max(memo[i-1][j], memo[i][j-1])
    
    # Construir la supersecuencia más corta utilizando la matriz de memorización
    supersequence = ""
    i, j = len(s1), len(s2)
    while i > 0 and j > 0:
        if s1[i-1] == s2[j-1]:
            supersequence = s1[i-1] + supersequence
            i -= 1
            j -= 1
        elif memo[i-1][j] > memo[i][j-1]:
            supersequence = s1[i-1] + supersequence
            i -= 1
        else:
            supersequence = s2[j-1] + supersequence
            j -= 1
    
    # Agregar cualquier carácter restante de s1 o s2 a la supersecuencia
    while i > 0:
        supersequence = s1[i-1] + supersequence
        i -= 1
    while j > 0:
        supersequence = s2[j-1] + supersequence
        j -= 1
    
    return supersequence

def get_graph_dp():
    sequencias = [["ABCDE", "FGHIJ"], ["KLMNOPQRSTU", "VWXYZABCDEFGHIJKLMNO"], ["PQRSTUVWXYZABCDEFGHIJKLMNO", "PQRSTUVWXYZABCDEFGHIJKLMNO"], ["LMNOPQRSTUVWXYZABCDEFGHIJ", "LMNOPQRSTUVWXYZABCDEFGHIJ"]]
    sequencias = [["ABCD", "ACDF" ],["ABC", "DEF"],["ATCG", "GACT"],["AABB", "ABAB"],["GTAC", "CTAG"],["ACGT", "GATC"],["AGGTAB", "GXTXAYB"],["GCGAGCTGCG", "CGTGCTAGCG"],["AAAGTCTGAC", "TGACTAAACG"],["AAAGTCTGAC", "TGACTAAACG"]]
    sequencias = [['OTNYQWIEXHZ', 'HYYLQCH'], ['VXTPAKLG', 'KYQKFEYTMVIPZOHXIYTB'], ['TDK', 'GYWYX'], ['NUYPDE', 'HSIBFTTYEEEBOZGLSIP'], ['YOTOINNDSFCTHFYRA', 'RPTHBTDFDIDIMDP'], ['CUKCIDCAIFUU', 'AKJOMWVNC'], ['WTCGBVCBEAPPF', 'PSDRPERDLXWCEZ'], ['P', 'LAGEAIQJ'], ['ICLDHFKZWGX', 'CSQSXYBBOVCEYPJW'], ['SJNFKYREKMAPJWXIG', 'UWEBGEVCMYVDTTHYKCM']]
    sequencias = [['NOWFYNGHEQ', 'LPDRPLHLOS'], ['TVMZAHTCWWRQSLMJXICT', 'RXQUMCRKIZONNDSADWTF'], ['NSBQWZNLJBTXDRHGERHRDTNQSHKQIZ', 'QBUJVFAPCMTGVJERFAXJUCDZHTIDGA'], ['NFBPEHHFTHOTSXUUHWUDGAQFWAFDEFFGBKPDFLSN', 'HYJAGZMUYXHQLUNQZOHFOQTZUZNGMGWQIMDMTKII'], ['LPRFXJNIUZELIWURKFJZODJZNCRTVYUBCKQKNOZDRIUTCFRUTN', 'IVGJJFEIHDCILFOPGOPYCLDAQDSNHERZRDCYJYEGYGJKUFJXCV'], ['UVVRIUMKJXFZWNXCAHHNHXSIUNCGHRHXBVKKDSEJSTNNQNNIKGUVJRXQMBZN', 'YZHMHBIVHQCHZZEZCOMKZRZMOZFJSOIDMBKFOOMZSSXQKDHUDQALPIRRTAJV'], ['QUPTOUSQRALJDJWXITJSHGCCOBCVPNKMFHZOYQNMBYMEPADVCTRJTLIRJGQGJYNXVTSTJX', 'UTSJUJRLPTSPBGZGQMRIIKUSPEVSKKCDWZYBNLUQZSGIVDLOOCAUJRPRZFRWMIVRQYLONJ'], ['WWRZVYUBQGWFDAAWTUZPVHEQKFEFADBLSNZPNGUNQCTUOULLLVJJRCJZOBPIFHXNAPJOCPHDFTPEJPVL', 'CQUUVGBPSBHJVSNBWUBBNETJPLZDOYVJZSKPDEQANZQJJDAJUPTEWKSCCQHSUOXPJHXXLLEBPHQAKRUR'], ['IWIZEKDLAHEHZLEMOBJLVDVNYHGXPVEACCZZBFCDUOUPHCUDIHGEABMYIWXDPKADTSWWFNZGLGECOTCTRYMGKPAXTG', 'VXQJRTUUAYXXUGJIHLDVJEATXVSUTLDXLQMEWZKWPIRBFAAKEOZHAAXOBEJONVYHWZCXCCFQTOAQONTSYTHZMCEEGV'], ['OLFEGHXVSCHLAEVNAAEIDQSQHHNKHFQIKWZHXWJVCIWZEQKVWUWPMEEHJAIJTICNVQICSHAFUVKJCVYYJXHWZLDQEDWOPCEPEMGB', 'PTESCVOQWPTMTLZTKMMVUOWRAJFPAQHYSKJIBRWPBYZOXOTYOURRHVRQOPLLUNNGFYRFPGVBSOZRCBVHZNIWELONZYRMKGXLJWMT'], ['PUHEBVSJVYUPJLQOWCQPQKRPOUBWSXQVOEKEIZJZLBHRAJCGRCPROEWHXGQCTPRPVACAHFCVHLWXLVADSWNMJUFOAARTOWBKVFURIQXQDTCTUU', 'LEWUMLYTRWNRYUPTNDKCODCSFNPWUNCNFVEVBPKGKAFJSCOTCLBTSIKYQAJHLVWUGVPCKXZLMOVIAVTARIITPDDDIBQSFAJLHBWMLENFPFWRYN'], ['FWLMHZBZGRGJAVZKGIDFKGTZAFSYRZGRKRFEGHLJECLWRLEEHGTFKLQEOHFHMVGKIEVQSYEKJUJQJGIUXBYTPOXHPOCNXVWFORAFGMVSXMZJAOJRPRDVGGLP', 'KCXFSHXUOZCMTCQYCQQCWRBCKFCKLVFDGJJJXZJABFGLRZNGTGXGMZMAUPVLYXJNFCTRVSFJIYEFKVFGHHSALGMQYRVSUWFYKNEWVMCBOENOCHAPHDBZSJOJ'], ['KIFFNRULEZXENRTBHWHIWWGOTZHIZYXBYYUKCLIVZTIVCGSPCKPGDOOIFCKJRFSEJVXECJCSPBGAFTMSAFRMBGQLKKSBGMLFBNSORSDAUDALSAWWWTSPKEMYQHOONBJKVL', 'WWZMVGANNPXORHAHEFLYGJHCYKFGJRTXPJNOBMGFGKXFWLDFAATLRZTITRSWEVFOFOXNLMLSQLKZHXTVKZTTHRCWYCQJWPPDFQVSTRPYFNFGDTCVYZTQUDGLLAUEOJWKBE'], ['DHNGWEAWXIYPOKLJVAVIYJGMDWBDPNOJXXRSDZNKAHKYVPGVCDCHRVKIDGIDBLNMRSWOYLNSTJUHKYIOJQQYGVPZBGFDBTKMJKDHZMRRDOAQRYWJSXOGFZHLUBHNCCRVRPIRJXONWKYD', 'DRSXTDDJWLBKYQWUAWZFJHTURWTWLGHHASBJZZCKGPEOJUSQISZKOATZWWDPLTVWXHKDRCKKUCCBIBMPYDDRRMJKHLPQUJDOMDEOHAGUQCGWAKDVICNDSSXFSEKKPJEVXJQTWZWQVJBQ'], ['TWRWQRZHQSSYLIYIWKCNLUVZHWNVSIVPJTTMARAQXIXLACBUBMZBJZCTFNADKTLTEEGMZOCVUXFYVOAOJFFEZOZMUXPSEKQBOWYNOOIPEORHPLEXSTIBKONSXTPBTACWBRXLEXBONEJAHISIIBTUJA', 'UKAIJYWLNXNIUTQGUZILULKQFOJYUCVRVGJONHTBICBEAMETDAMBWIXHTRFPLKTLKJXYZOQBEEOLPJIVJUNQWXTREIFNZVSUZGSBQVPMLEASDPAOLGNHYLUQOGNVJHURPGUZDUZLMVCICFMLLMQUZR'], ['OVITIGEFWAIMRVNSDTHGZOPUORLZHAQZFKCVMKZTKDJNGBEMIBDXAKYWQPEBWMKZECUWXLZIFUFTGGLDOFRVJCOCVAMKSDFZETURFBXYKLMXMKMJTREWCFMPHWSYCRBVPEKVGZTRFDSYZAIZRRAOHZTUOHTCBILN', 'OYOVLJSTJGCVJTNLNHKGYOWWVDSBXLJVUKKWTERHMLRKYDADQNLHYWVOAUJEVKLANRDJIKISJYSTJYSDMRGIBQPZXNWKUTBSSKDIYBLTZCJALOOKCHJAKHFAKUZWQBECTVQKKZIUNLEMCVWCBQXQUOJTUPWMFLJK'], ['MIVAJEBHHSFKYAUYOSKCDDECRYRPRQYGCJBXEBJSAIWVJDQFDNZYADUHLUBBFKUOWYDKJLELEKBTWQHEMEFZIJCGAUHIKLLOHPOJCBGISYUPFJVLKYNNHFINZXTKLXUUKXCINGFCQIXNMUESRIDNRPWYQKAVVRGUDJLTEWHCVL', 'VASNIMFKNGPSLDKJDYSZATRQTIVXMORGMBYTVEBWOWGCQJRVMFLDHIQTBQOYXQCCLGOPYLFXLYYUPHTCMHNHPALHLSTZTMSLEPTXQPWNKWZOWMRGTQAELRWSRKDYQNAXUVEXZXOTHRVLZNEGGJYMMYTQJDGRZWALMAHHIQCXAY'], ['HDUCRXKWZUVXYEZKFTAEAHTIJNCSDISXLYNZWHZSWTNZZESPKTXZVHZVIIQTDLQAJZKBXCMUBRISOGIXKPCBVMXJQMNAVUKFJRBHBERBUOFPDABVOXOVPUQEOBGKZMOSKVMBKMMGTZIMBQYKGFRWZKQTUGJRYGJULTZXGWAYSKRDJBAOMRSK', 'UMPAXCMUPAEZFIYROLTLPUHOCATGQZGCOGKFIMUMQCPOENAEYPCMKXSIGODGYHEZBTWULWXRVZYQVLULORAOBXOHSATHRGQYTUBUNFGQYLVWGLNZZLDPLSTDEUHSOJHAHDQJTRBKZAHVHPQLNKZHMWWYJEBWRCACBQXSLHXCWWGBJOVBTYRO'], ['HGKVTSMBAZCOZQIFCQQXVALQRFGQYNJPVABVZIDLBNTNBPGIAONIORXWTSKTFXCXZGZAWHEWTROXHUVEIDWQUAYHEYJCDWRXDWCTYAZAZFUIUYJJDCXVHXXRGAYKTCYBDTVIWELGFPPZKZWBBHAXKXAVVOLQMYIGEOYNJDNBTTZBCCRJPCDPVYGWEAPQDR', 'QCHOEOMKWKNMAPWFHRPRGCJDCYZMWMPARKCAPEVWUHQSVCCONOFNGVZVGMZTRTMWIPNNJJSHAAAOGKTUVKMWNSWJBSTXEBDUVHMAZLCJXZNJXRFYMOGOVVQSVSUZBWPMKWKIXBXHSVKGADLWLMWMFRQOBJIVXSAEBQCVLFXKJWJYXUSKEFDTBZKKJCLCFO'], ['XMIUWOFPMQETQUMJUPMYZJLXRPPSEIBNPZEPDLRGJCZEVHXCQJQZOARMMKNXNYWHYWUHJDBHPPTFZLCINHKKTYGCXZVKWHPNDPVRKYFJYWAJOFTYKVQZZVEWGRMYZAWIOITOZAFRKHWJKDAANMGCDALARUVIIBZPNDVECZDAKXRBXBSKVSTQHPVPEYSIYANFAJGPARMC', 'UTCIEKEIANAVUZUSMEDEGCYONKULIPLJTSSPJMSTXINRQDFTKTHFBKCEOSLOMVXEWPVNNDQYPXOGAPRXMGFSWFHNIZREFPIPRWEVDVMUDFKBPOJJNEFVLFGOVZOBLLVYKGJDEHEAOUYUIOJPNSGYKHZFFZBKREXDLMKKJOXARCTGPFGWYTFPNBOFOTMSUUWDGIJBUQDH']]
    resultados = []
    tiempos = []

    for i in range(1, len(sequencias)):
        start = perf_counter()
        res = shortest_common_supersequence_dp(sequencias[i][0], sequencias[i][1])
        end = perf_counter()
        resultados.append(len(res))
        tiempos.append(end - start)

    # plot resultados contra tiempos
    plt.plot(resultados, tiempos)
    # plt.plot(range(1, len(sequencias)), tiempos)
    plt.show()

    